# FreelanceHub Frontend UI Implementation Prompts

Based on the comprehensive analysis of the FreelanceHub NestJS backend, here are detailed prompts to implement all freelancer-related UIs after authentication.

## Table of Contents
1. [Freelancer Profile Setup & Management](#freelancer-profile-setup--management)
2. [Freelancer Dashboard](#freelancer-dashboard)
3. [Project & Proposal Management](#project--proposal-management)
4. [Messaging System](#messaging-system)
5. [Contract Management](#contract-management)
6. [Payment Management](#payment-management)
7. [Reviews & Ratings](#reviews--ratings)
8. [Notifications](#notifications)
9. [Settings & Preferences](#settings--preferences)

---

## 1. Freelancer Profile Setup & Management

### 1.1 Initial Profile Creation/Onboarding
**Prompt:** Create a comprehensive freelancer onboarding flow with the following screens:

**Screen 1: Welcome & Profile Creation**
- Call `POST /freelancers/create-or-get` to create or retrieve existing profile
- Multi-step wizard with progress indicator
- Fields: Basic info (auto-populated from user registration), professional title, bio
- API Integration: Uses authenticated user's data from registration

**Screen 2: Skills Selection**
- Fetch available skills from `GET /skills` and popular skills from `GET /skills/popular`
- Search functionality using `GET /skills/search?name={query}`
- Tag-based selection interface with categories
- Minimum 3 skills required
- Update using `PUT /freelancers/me/skills`

**Screen 3: Hourly Rate Setting**
- Rate input with currency selector (USD default)
- Market rate suggestions based on skills
- Rate calculator/estimator
- Update using `PUT /freelancers/me/rate`

**Screen 4: Education & Certifications**
- Education background input (degree, institution, year)
- Certification upload and management
- File upload using `POST /file-upload/single` for certificates
- Update using `PUT /freelancers/me/education` and `PUT /freelancers/me/certifications`

**Screen 5: Portfolio & Work Samples**
- Portfolio links management
- File upload for work samples using `POST /file-upload/multiple`
- Project descriptions and links
- Update using `PUT /freelancers/me/portfolio`

**Screen 6: Availability Setup**
- Availability toggle and status
- Working hours/timezone setup
- Update using `PUT /freelancers/me/availability`

### 1.2 Profile Management Dashboard
**Prompt:** Create a comprehensive profile management interface:

**Main Profile Page**
- Display current profile using `GET /freelancers/me`
- Quick stats: completed projects, ratings, earnings
- Profile completion percentage indicator
- Quick edit buttons for each section

**Profile Editor Components:**
- Inline editing for basic info
- Skills manager with add/remove functionality
- Rate adjuster with market comparison
- Portfolio manager with drag-drop reordering
- Certification manager with expiry tracking
- Availability scheduler

**Profile Preview:**
- "View as Client" mode showing public profile
- Profile strength meter
- SEO optimization suggestions

---

## 2. Freelancer Dashboard

### 2.1 Main Dashboard
**Prompt:** Create a comprehensive freelancer dashboard with these sections:

**Header Section:**
- Welcome message with freelancer name
- Availability toggle switch (quick update via `PATCH /freelancers/me/availability`)
- Notification bell with unread count from `GET /notifications/my`

**Overview Cards:**
- Active Projects: `GET /contracts/my-contracts?status=active`
- Pending Proposals: `GET /proposals/my-proposals?status=pending`
- This Month Earnings: `GET /payments/my-payments?period=current-month`
- Profile Views: `GET /analytics/my-analytics`

**Recent Activity Feed:**
- New messages: `GET /messages/conversations`
- Proposal responses: `GET /proposals/my-proposals?recent=true`
- Contract updates: `GET /contracts/my-contracts?recent=true`
- Payment notifications: `GET /payments/my-payments?recent=true`

**Quick Actions:**
- Browse Projects: Link to project browser
- Update Availability: Quick toggle
- View Messages: Link to messaging
- Submit Proposal: Quick access

**Analytics Section:**
- Earnings chart: `GET /analytics/my-analytics`
- Proposal success rate
- Profile performance metrics
- Project completion rate

### 2.2 Analytics Dashboard
**Prompt:** Create detailed analytics dashboard:

**Performance Metrics:**
- Earnings over time (daily/weekly/monthly views)
- Proposal submission vs acceptance rate
- Project completion statistics
- Client satisfaction scores

**Data Sources:**
- `GET /analytics/my-analytics` for personal analytics
- `GET /payments/my-payments` for earnings data
- `GET /reviews/stats/{userId}` for rating statistics
- `GET /proposals/my-proposals` for proposal metrics

---

## 3. Project & Proposal Management

### 3.1 Project Browser
**Prompt:** Create a project discovery and browsing interface:

**Project Listing:**
- Fetch projects using `GET /projects` with filters:
  - Skills filter
  - Budget range
  - Project duration
  - Posted date
  - Client rating
- Real-time search and filtering
- Infinite scroll or pagination

**Project Cards:**
- Project title, description preview
- Budget and duration
- Required skills (highlight matching skills)
- Client information and rating
- Proposal count and competition level
- "Submit Proposal" button

**Project Detail View:**
- Full project description
- Detailed requirements
- Client profile and history
- Similar freelancer profiles who got hired
- Proposal submission form

### 3.2 Proposal Management
**Prompt:** Create comprehensive proposal management system:

**Proposal Submission Form:**
- Cover letter editor with templates
- Timeline estimation
- Budget proposal (fixed or hourly)
- Milestone breakdown for larger projects
- Attachment upload using `POST /file-upload/multiple`
- Submit using `POST /proposals`

**My Proposals Dashboard:**
- List all proposals using `GET /proposals/my-proposals`
- Filter by status (pending, accepted, rejected)
- Sort by date, project value, response rate
- Quick stats: submission rate, acceptance rate

**Proposal Detail View:**
- Proposal content and attachments
- Project details
- Client response/feedback
- Status tracking
- Edit/withdraw options for pending proposals

**Proposal Templates:**
- Save frequently used proposal sections
- Industry-specific templates
- Personalization variables

---

## 4. Messaging System

### 4.1 Message Center
**Prompt:** Create a comprehensive messaging interface:

**Conversation List:**
- Fetch conversations using `GET /messages/conversations`
- Show client name, last message preview, timestamp
- Unread message indicators
- Search and filter conversations
- Archive/delete conversation options

**Chat Interface:**
- Real-time messaging using WebSocket integration
- Send messages using `POST /messages`
- File sharing capabilities using `POST /file-upload/single`
- Message status indicators (sent, delivered, read)
- Typing indicators

**Message Features:**
- Rich text formatting
- File attachments (documents, images)
- Message search within conversations
- Message pinning for important items
- Professional templates for common responses

### 4.2 Communication Tools
**Prompt:** Add advanced communication features:

**Video Call Integration:**
- Schedule video calls with clients
- Integration with popular platforms (Zoom, Google Meet)
- Call history and recordings

**Project Communication:**
- Project-specific messaging threads
- Integration with contract milestones
- Automated updates for project progress

---

## 5. Contract Management

### 5.1 Contract Dashboard
**Prompt:** Create contract management interface:

**Active Contracts View:**
- List contracts using `GET /contracts/my-contracts`
- Contract status indicators
- Progress tracking for milestones
- Quick actions (mark milestone complete, request payment)

**Contract Details:**
- Full contract terms and conditions
- Milestone breakdown with progress
- Payment schedule and status
- Time tracking integration
- File sharing for deliverables

**Contract Actions:**
- Mark milestones complete using `PATCH /contracts/{id}/milestones/{milestoneId}`
- Upload deliverables using `POST /file-upload/multiple`
- Request milestone payments
- Generate contract PDFs using `GET /contracts/{id}/pdf`

### 5.2 Time Tracking
**Prompt:** Implement time tracking functionality:

**Time Tracker:**
- Start/stop timer for active projects
- Manual time entry with descriptions
- Time logs with date, duration, description
- Screenshot capture for proof of work (optional)

**Time Reports:**
- Daily/weekly/monthly time summaries
- Export time logs for client review
- Integration with contract milestones

---

## 6. Payment Management

### 6.1 Earnings Dashboard
**Prompt:** Create comprehensive payment management:

**Earnings Overview:**
- Total earnings, pending payments, available balance
- Fetch data using `GET /payments/my-payments`
- Monthly earnings chart
- Payment status breakdown

**Payment History:**
- Detailed payment records
- Filter by status, date range, project
- Export payment reports
- Tax document generation

**Withdrawal Management:**
- Available balance for withdrawal
- Payment method setup (bank, PayPal, etc.)
- Withdrawal request using `POST /payments/withdraw`
- Withdrawal history and status tracking

### 6.2 Financial Tools
**Prompt:** Add financial management features:

**Expense Tracking:**
- Business expense categorization
- Receipt upload and management
- Tax deduction calculator

**Financial Reports:**
- Income statements
- Tax preparation documents
- Profit/loss summaries
- Expense breakdown by category

---

## 7. Reviews & Ratings

### 7.1 Review Management
**Prompt:** Create review and rating system:

**Reviews Display:**
- Show received reviews using `GET /reviews/stats/{userId}`
- Overall rating calculation
- Review breakdown by category (communication, quality, timeliness)
- Recent reviews highlight

**Review Responses:**
- Respond to client reviews
- Professional response templates
- Review dispute process

**Review Analytics:**
- Rating trends over time
- Category-wise performance
- Comparison with platform averages

---

## 8. Notifications

### 8.1 Notification Center
**Prompt:** Implement comprehensive notification system:

**Notification Dashboard:**
- Fetch notifications using `GET /notifications/my`
- Categorize by type (messages, proposals, payments, system)
- Mark as read/unread using `PATCH /notifications/{id}`
- Bulk actions (mark all read, delete)

**Notification Preferences:**
- Email notification settings
- In-app notification preferences
- Mobile push notification controls
- Frequency settings (instant, digest, weekly)

**Real-time Notifications:**
- WebSocket integration for instant updates
- Desktop notifications for important events
- Sound and visual alerts

---

## 9. Settings & Preferences

### 9.1 Account Settings
**Prompt:** Create comprehensive settings interface:

**Profile Settings:**
- Edit personal information
- Professional details management
- Privacy settings (profile visibility)
- Account deactivation options

**Security Settings:**
- Password change
- Two-factor authentication setup
- Login history and device management
- API key management for integrations

**Notification Preferences:**
- Email notification toggles
- SMS notification setup
- Push notification preferences
- Communication preferences with clients

### 9.2 Business Settings
**Prompt:** Add business-related settings:

**Payment Settings:**
- Payment method preferences
- Tax information and forms
- Invoicing preferences
- Currency and timezone settings

**Availability Management:**
- Working hours setup
- Holiday/vacation scheduling
- Automatic responses during unavailability
- Calendar integration

---

## Technical Implementation Notes

### API Integration Points:
- **Base URL:** Your backend API base URL
- **Authentication:** Include JWT token in Authorization header for all requests
- **Error Handling:** Implement proper error handling for all API calls
- **Loading States:** Show appropriate loading indicators during API calls
- **Caching:** Implement appropriate caching for frequently accessed data

### UI/UX Considerations:
- **Responsive Design:** Ensure all interfaces work on desktop, tablet, and mobile
- **Accessibility:** Follow WCAG guidelines for accessibility
- **Performance:** Implement lazy loading for large datasets
- **Offline Support:** Consider offline capabilities for time tracking and message drafting

### Security Considerations:
- **Input Validation:** Validate all user inputs on the frontend
- **File Upload Security:** Implement proper file type and size restrictions
- **XSS Prevention:** Sanitize all user-generated content
- **CSRF Protection:** Implement CSRF tokens where necessary

### State Management:
- Use appropriate state management (Redux, Zustand, or Context API)
- Implement optimistic updates for better user experience
- Handle real-time updates through WebSocket connections

This comprehensive set of prompts covers all major freelancer workflows in the FreelanceHub platform, from initial onboarding to ongoing project management and business operations.